// COPYRIGHT 2009, 2010, 2011, 2012, 2013 by the Open Rails project.
// 
// This file is part of Open Rails.
// 
// Open Rails is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Open Rails is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Open Rails.  If not, see <http://www.gnu.org/licenses/>.

/* LOCOMOTIVE CLASSES
 * 
 * Used as a base for Steam, Diesel and Electric locomotive classes.
 * 
 * A locomotive is represented by two classes:
 *  MSTSLocomotive - defines the behaviour, ie physics, motion, power generated etc
 *  MSTSLocomotiveViewer - defines the appearance in a 3D viewer including animation for wipers etc
 *  
 * Both these classes derive from corresponding classes for a basic TrainCar
 *  TrainCar - provides for movement, rolling friction, etc
 *  TrainCarViewer - provides basic animation for running gear, wipers, etc
 *  
 * Locomotives can either be controlled by a player, 
 * or controlled by the train's MU signals for brake and throttle etc.
 * The player controlled loco generates the MU signals which pass along to every
 * unit in the train.
 * For AI trains, the AI software directly generates the MU signals - there is no
 * player controlled train.
 * 
 * The end result of the physics calculations for the the locomotive is
 * a TractiveForce and a FrictionForce ( generated by the TrainCar class )
 * 
 */

using System.Collections.Generic;
using System.Collections.ObjectModel;

using FreeTrainSimulator.Common;

using Orts.Formats.Msts.Files;

namespace Orts.Simulation.RollingStocks
{
    public class CabView
    {
        public CabViewFile CVFFile { get; }
        public ReadOnlyCollection<ViewPoint> ViewPointList { get; }
        public ExtendedCVF ExtendedCVF { get; }
        public CabViewType CabViewType { get; internal set; }

        public CabView(CabViewFile cvfFile, IList<ViewPoint> viewPointList, ExtendedCVF extendedCVF, CabViewType cabViewType)
        {
            CVFFile = cvfFile;
            ViewPointList = new ReadOnlyCollection<ViewPoint>(viewPointList);
            ExtendedCVF = extendedCVF;
            CabViewType = cabViewType;
        }
    }
}
